{# @pebvariable name="course" type="ch.trick17.gradingserver.model.Course" #}
{# @pebvariable name="deadline" type="java.time.Instant" #}
{# @pebvariable name="displaySettings" type="java.util.List<ch.trick17.gradingserver.model.ProblemSet.DisplaySetting>" #}
{# @pebvariable name="possibleDependencies" type="java.util.List<ch.trick17.gradingserver.model.JarFile>" #}
{# @pebvariable name="dependencies" type="java.util.List<ch.trick17.gradingserver.model.JarFile>" #}

{% extends "layout" %}

{% block title %}{{ message(add ? "problem-set.add" : "problem-set.edit") }}{% endblock %}

{% block content %}
<div class="max-w-lg m-auto">
    <a href="{{ add ? ".." : "." }}" class="block mb-3 link group">
        <i class="fas fa-arrow-left"></i>
        <span class="group-hover:link-hover">
            {{ add ? course.name : name }}
        </span>
    </a>
    <h2>{{ message(add ? "problem-set.add" : "problem-set.edit") }}</h2>

    {% if error %}
        {% embed "fragments/alert" with { "icon": "triangle-exclamation" } %}
        {% block content %}
            {{ error }}
        {% endblock %}
        {% endembed %}
    {% endif %}

    <form method="post" enctype="multipart/form-data">
        <label for="name" class="block mb-2">
            {{ message("name") }}
        </label>
        <input type="text" id="name" name="name" autofocus
               class="block w-full mb-3" value="{{ name }}" required>

        <label for="deadlineDate" class="block mb-2">
            {{ message("problem-set.deadline") }}
        </label>
        <div class="flex gap-3 items-center mb-3">
            <input type="date" id="deadlineDate" name="deadlineDate" class="grow" required>
            <input type="time" id="deadlineTime" name="deadlineTime" class="grow" required>
            <input type="hidden" id="deadlineTimeZoneOffset" name="deadlineTimeZoneOffset" value="0">
            <span id="deadlineTimeZoneLabel">(UTC)</span>
            <script>
                {
                    // convert UTC deadline to local time
                    let deadlineRaw = "{{ deadline | default("") }}";
                    let deadline;
                    if (deadlineRaw) {
                        deadline = new Date(deadlineRaw);
                    } else {
                        deadline = new Date();
                        deadline.setDate(deadline.getDate() + 7);
                        deadline.setHours(23, 59, 0, 0);
                    }
                    let dateElem = document.getElementById("deadlineDate");
                    let timeElem = document.getElementById("deadlineTime");
                    dateElem.value = deadline.getFullYear() + "-" +
                            (deadline.getMonth() + 1).toString().padStart(2, "0") + "-" +
                            deadline.getDate().toString().padStart(2, "0");
                    timeElem.value = deadline.getHours().toString().padStart(2, "0") + ":" +
                            deadline.getMinutes().toString().padStart(2, "0");

                    // update time zone based on deadline
                    let lang = document.documentElement.lang;
                    let timeZoneField = document.getElementById("deadlineTimeZoneOffset");
                    let timeZoneLabel = document.getElementById("deadlineTimeZoneLabel");

                    function formatTimeZone(date, style) {
                        let dtf = Intl.DateTimeFormat(lang, {
                            timeZoneName: style
                        });
                        let parts = dtf.formatToParts(date);
                        return parts.find(p => p.type === "timeZoneName").value;
                    }

                    function updateTimeZone() {
                        let newDeadline = new Date(dateElem.value + "T" + timeElem.value);
                        timeZoneField.value = -newDeadline.getTimezoneOffset(); // minutes
                        timeZoneLabel.textContent = "(" + formatTimeZone(newDeadline, "short") + ")";
                        timeZoneLabel.title = formatTimeZone(newDeadline, "long");
                    }

                    updateTimeZone();
                    dateElem.addEventListener("input", updateTimeZone);
                    timeElem.addEventListener("input", updateTimeZone);
                }
            </script>
        </div>

        <div class="mb-2">
            {{ message("problem-set.display") }}
        </div>
        <div class="mb-3">
            {% for d in displaySettings %}
                {% set id = d.name.toLowerCase.replace('_', '-') %}
                <div class="flex gap-2 items-baseline">
                    <input type="radio" id="{{ id }}" name="displaySetting"
                           value="{{ d }}" {{ displaySetting == d ? "checked" : "" }}>
                    <div class="mb-1">
                        <label for="{{ id }}">
                            {{ message("problem-set.display." + id) }}
                        </label>
                        <div class="form-text">
                            {{ message("problem-set.display." + id + "-desc") }}
                        </div>
                    </div>
                </div>
            {% endfor %}
        </div>

        <label for="percentageGoal" class="block mb-0.5">
            {{ message("problem-set.percentage-goal") }}
        </label>
        <div class="flex items-center gap-3 mb-6">
            <input type="range" id="percentageGoal" name="percentageGoal"
                   min="0" max="100" step="5" value="{{ percentageGoal }}"
                   class="block w-full grow">
            <span id="percentageGoalLabel" class="text-slate-400 whitespace-nowrap"></span>
            <script>
                {
                    const input = document.getElementById("percentageGoal");
                    const label = document.getElementById("percentageGoalLabel");
                    label.innerHTML = input.value + " %";
                    input.addEventListener("input", () => {
                        label.innerHTML = input.value + " %";
                    });
                }
            </script>
        </div>


        <h3>{{ message("problem-set.project-config") }}</h3>

        <label for="structure" class="block mb-2">
                {{ message("problem-set.project-config.structure") }}
        </label>
        <select name="structure" id="structure" class="block w-full mb-3">
            <option value="ECLIPSE" {{ structure == "ECLIPSE" ? "selected" : "" }}>
                Eclipse (src & test)
            </option>
            <option value="MAVEN" {{ structure == "MAVEN" ? "selected" : "" }}>
                Maven (src / main / java & src/test/java)
            </option>
        </select>

        <div class="sm:grid grid-flow-col gap-x-3"
             style="grid-template-rows: auto auto">
            <label for="projectRoot" class="block mb-2">
                {{ message("problem-set.project-config.root") }}
            </label>
            <input type="text" id="projectRoot" name="projectRoot"
                   class="block w-full mb-3" value="{{ projectRoot }}"
                   placeholder="{{ message("problem-set.project-config.root-example") }}">

            <label for="packageFilter" class="block mb-2">
                {{ message("problem-set.project-config.package-filter") }}
            </label>
            <input type="text" id="packageFilter" name="packageFilter"
                   class="block w-full mb-3" value="{{ packageFilter }}"
                   pattern="[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)*"
                   placeholder="{{ message("problem-set.project-config.package-filter-example") }}">
        </div>

        <label for="dependencies" class="block mb-2">
            {{ message("problem-set.project-config.dependencies") }}
        </label>
        <select name="dependencies" id="dependencies" multiple size="3"
                class="block w-full mb-2">
            {% for d in possibleDependencies %}
                <option value="{{ d.id }}" {{ dependencies contains d ? "selected" : "" }}>
                    {{ d.filename }}
                </option>
            {% endfor %}
        </select>
        <textarea class="w-full mb-1" name="newDependencies" rows="2"
                  placeholder="{{ message("problem-set.project-config.dependencies-new") }}">
            {{- newDependencies -}}
        </textarea>
        <div class="form-text mb-6">
            {{ message("problem-set.project-config.dependencies-desc") | raw }}
        </div>


        <h3>{{ message("problem-set.grading-config") }}</h3>

        <div class="mb-3">
            <ul class="flex flex-wrap text-center gap-6" id="grading-config-tabs"
                data-tabs-toggle="#default-tab-content" role="tablist">
                <li role="tab" class="flex gap-2 whitespace-nowrap" id="impl-grading-tab"
                    data-tabs-target="#impl-grading"
                    {{ gradingType == "IMPLEMENTATION" ? "aria-selected='true'" : "" }}>
                    <input type="radio" id="impl-grading-button" name="gradingType"
                           value="IMPLEMENTATION">
                    <label for="impl-grading-button">
                        {{ message("problem-set.grading-config.implementation") }}
                    </label>
                </li>
                <li role="tab" class="flex gap-2 whitespace-nowrap" id="test-suite-grading-tab"
                    data-tabs-target="#test-suite-grading"
                    {{ gradingType == "TEST_SUITE" ? "aria-selected='true'" : "" }}>
                    <input type="radio" id="test-suite-grading-button" name="gradingType"
                            value="TEST_SUITE">
                    <label for="test-suite-grading-button">
                        {{ message("problem-set.grading-config.test-suite") }}
                    </label>
                </li>
            </ul>
        </div>

        <div id="grading-config-panels" class="mb-6">
            <div id="impl-grading" role="tabpanel" class="hidden">
                <label for="testClassFile" class="block mb-2">
                    {{ message("problem-set.grading-config.test-class") }}
                </label>
                <input type="file" id="testClassFile" name="testClassFile"
                       class="block w-full mb-3" accept=".java"
                       {{ add or gradingType == "TEST_SUITE" ? "data-required-if-active" : "" }}>

                <label for="compiler" class="block mb-2">
                    {{ message("problem-set.grading-config.compiler") }}
                </label>
                <select name="compiler" id="compiler" class="block w-full mb-3">
                    <option value="ECLIPSE" {{ options.compiler == "ECLIPSE" ? "selected" : "" }}>
                        {{ message("problem-set.grading-config.compiler.eclipse" )}}
                    </option>
                    <option value="JAVAC" {{ options.compiler == "JAVAC" ? "selected" : "" }}>
                        {{ message("problem-set.grading-config.compiler.javac") }}
                    </option>
                </select>

                <label for="repetitions" class="block mb-2">
                    {{ message("problem-set.grading-config.repetitions") }}
                </label>
                <input type="number" id="repetitions" name="repetitions" required
                       min="1" class="block w-full mb-3" value="{{ options.repetitions }}">

                <label for="repTimeoutMs" class="block mb-2">
                    {{ message("problem-set.grading-config.rep-timeout") }}
                </label>
                <input type="number" id="repTimeoutMs" min="100" step="100" required
                       class="block w-full mb-3"
                       name="repTimeoutMs" value="{{ options.repTimeout.toMillis }}">

                <label for="testTimeoutMs" class="block mb-2">
                    {{ message("problem-set.grading-config.test-timeout") }}
                </label>
                <input type="number" id="testTimeoutMs" min="100" step="100" required
                       class="block w-full"
                       name="testTimeoutMs" value="{{ options.testTimeout.toMillis }}">
            </div>

            <div id="test-suite-grading" role="tabpanel" class="hidden">
                <label for="refTestSuiteFiles" class="block mb-2">
                        {{ message("problem-set.grading-config.ref-test-suite") }}
                </label>
                <input type="file" id="refTestSuiteFiles" name="refTestSuiteFiles"
                       multiple webkitdirectory class="block w-full mb-3"
                    {{ add or gradingType == "IMPLEMENTATION" ? "data-required-if-active" : "" }}>

                <label for="refImplementationFiles" class="block mb-2">
                    {{ message("problem-set.grading-config.ref-implementation") }}
                </label>
                <input type="file" id="refImplementationFiles" name="refImplementationFiles"
                       multiple webkitdirectory class="block w-full mb-3"
                       {{ add or gradingType == "IMPLEMENTATION" ? "data-required-if-active" : "" }}>
            </div>
        </div>

        <script>
            {
                let onLoadListener = () => {
                    const tabs = FlowbiteInstances.getInstance("Tabs", "grading-config-tabs");
                    const tabShown = () => {
                        const tab = tabs.getActiveTab();
                        tab.triggerEl.querySelector("input").checked = true;
                        for (const panel of document.querySelectorAll("#grading-config-panels > div")) {
                            for (const input of panel.querySelectorAll("input")) {
                                if (input.dataset.requiredIfActive !== undefined) {
                                    input.required = panel === tab.targetEl;
                                }
                            }
                        }
                    };
                    tabShown();
                    tabs.updateOnShow(tabShown);
                };
                window.addEventListener("turbo:load", onLoadListener);
                window.addEventListener("turbo:render", onLoadListener);
            }
        </script>

        <div class="button-group-2">
            <button class="button">
                {{ message(add ? "add" : "save") }}
            </button>
            <a href="{{ add ? ".." : "." }}" class="button button-secondary">
                {{ message("cancel") }}
            </a>
        </div>
    </form>
</div>
{% endblock %}
